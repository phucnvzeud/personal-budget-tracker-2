{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { addDays, format, startOfMonth, endOfMonth, getMonth, getYear, isSameDay, isSameWeek, isSameMonth, isSameYear } from 'date-fns';\nimport { useAuth } from '../context/AuthContext';\nconst DEFAULT_STORAGE_KEY = 'budget-tracker-data';\nconst RECURRING_PAYMENTS_KEY = 'recurring-payments';\n\n// Helper function to safely handle date serialization\nconst dateReviver = (key, value) => {\n  if (key === 'date' || key === 'startDate' || key === 'endDate') {\n    return new Date(value);\n  }\n  return value;\n};\nexport const useFinancialData = currentDate => {\n  _s();\n  const {\n    currentUser\n  } = useAuth();\n  const [entries, setEntries] = useState([]);\n  const [recurringPayments, setRecurringPayments] = useState([]);\n  const [monthData, setMonthData] = useState({\n    days: {},\n    totalIncome: 0,\n    totalExpenses: 0,\n    monthlyBalance: 0\n  });\n  const [yearData, setYearData] = useState({\n    year: getYear(currentDate),\n    months: [],\n    totalIncome: 0,\n    totalExpenses: 0,\n    yearlyBalance: 0\n  });\n\n  // Get storage key for the current user\n  const getStorageKey = useCallback(key => {\n    return currentUser ? `${key}-${currentUser.id}` : key;\n  }, [currentUser]);\n\n  // Load entries and recurring payments from localStorage\n  useEffect(() => {\n    try {\n      const entriesKey = getStorageKey(DEFAULT_STORAGE_KEY);\n      const recurringKey = getStorageKey(RECURRING_PAYMENTS_KEY);\n      const storedEntries = localStorage.getItem(entriesKey);\n      const storedRecurring = localStorage.getItem(recurringKey);\n      if (storedEntries) {\n        const parsedEntries = JSON.parse(storedEntries, dateReviver);\n        setEntries(Array.isArray(parsedEntries) ? parsedEntries : []);\n      }\n      if (storedRecurring) {\n        const parsedRecurring = JSON.parse(storedRecurring, dateReviver);\n        setRecurringPayments(Array.isArray(parsedRecurring) ? parsedRecurring : []);\n      }\n    } catch (error) {\n      console.error('Error loading data from localStorage', error);\n      setEntries([]);\n      setRecurringPayments([]);\n    }\n  }, [getStorageKey]);\n\n  // Save entries and recurring payments to localStorage\n  useEffect(() => {\n    try {\n      const entriesKey = getStorageKey(DEFAULT_STORAGE_KEY);\n      const recurringKey = getStorageKey(RECURRING_PAYMENTS_KEY);\n      localStorage.setItem(entriesKey, JSON.stringify(entries, (key, value) => {\n        if (value instanceof Date) {\n          return value.toISOString();\n        }\n        return value;\n      }));\n      localStorage.setItem(recurringKey, JSON.stringify(recurringPayments, (key, value) => {\n        if (value instanceof Date) {\n          return value.toISOString();\n        }\n        return value;\n      }));\n    } catch (error) {\n      console.error('Error saving data to localStorage', error);\n    }\n  }, [entries, recurringPayments, getStorageKey]);\n\n  // Process recurring payments and update entries\n  useEffect(() => {\n    const processRecurringPayments = () => {\n      const newEntries = [];\n      const today = new Date();\n      recurringPayments.forEach(payment => {\n        if (!payment.isActive) return;\n        const shouldAddEntry = (() => {\n          if (payment.endDate && payment.endDate < today) return false;\n          if (payment.startDate > today) return false;\n          switch (payment.frequency) {\n            case 'daily':\n              return true;\n            case 'weekly':\n              return isSameWeek(today, payment.startDate) && today.getDay() === payment.dayOfWeek;\n            case 'monthly':\n              return isSameMonth(today, payment.startDate) && today.getDate() === payment.dayOfMonth;\n            case 'yearly':\n              return isSameYear(today, payment.startDate) && today.getMonth() === payment.startDate.getMonth() && today.getDate() === payment.startDate.getDate();\n            default:\n              return false;\n          }\n        })();\n        if (shouldAddEntry) {\n          const entryExists = entries.some(entry => isSameDay(entry.date, today) && entry.description === payment.description);\n          if (!entryExists) {\n            newEntries.push({\n              id: `recurring_${payment.id}_${Date.now()}`,\n              date: today,\n              amount: payment.amount,\n              description: payment.description,\n              type: payment.type\n            });\n          }\n        }\n      });\n      if (newEntries.length > 0) {\n        setEntries(prevEntries => [...prevEntries, ...newEntries]);\n      }\n    };\n    processRecurringPayments();\n  }, [recurringPayments, entries]);\n\n  // Update month data whenever entries or current date change\n  useEffect(() => {\n    try {\n      const monthStart = startOfMonth(currentDate);\n      const monthEnd = endOfMonth(currentDate);\n      const daysInMonth = {};\n\n      // Initialize days in month\n      let day = monthStart;\n      while (day <= monthEnd) {\n        const dayStr = format(day, 'yyyy-MM-dd');\n        daysInMonth[dayStr] = {\n          date: new Date(day),\n          entries: [],\n          totalIncome: 0,\n          totalExpenses: 0,\n          dailyBalance: 0,\n          runningBalance: 0\n        };\n        day = addDays(day, 1);\n      }\n\n      // Add entries to their respective days\n      let monthlyIncome = 0;\n      let monthlyExpenses = 0;\n      entries.forEach(entry => {\n        const entryDate = entry.date instanceof Date ? entry.date : new Date(entry.date);\n        if (entryDate >= monthStart && entryDate <= monthEnd) {\n          const dayStr = format(entryDate, 'yyyy-MM-dd');\n          if (daysInMonth[dayStr]) {\n            daysInMonth[dayStr].entries.push({\n              ...entry,\n              date: entryDate\n            });\n            if (entry.type === 'income') {\n              daysInMonth[dayStr].totalIncome += entry.amount;\n              monthlyIncome += entry.amount;\n            } else {\n              daysInMonth[dayStr].totalExpenses += entry.amount;\n              monthlyExpenses += entry.amount;\n            }\n            daysInMonth[dayStr].dailyBalance = daysInMonth[dayStr].totalIncome - daysInMonth[dayStr].totalExpenses;\n          }\n        }\n      });\n\n      // Calculate running balance for each day\n      let runningBalance = 0;\n      day = monthStart;\n      while (day <= monthEnd) {\n        const dayStr = format(day, 'yyyy-MM-dd');\n        runningBalance += daysInMonth[dayStr].dailyBalance;\n        daysInMonth[dayStr].runningBalance = runningBalance;\n        day = addDays(day, 1);\n      }\n      setMonthData({\n        days: daysInMonth,\n        totalIncome: monthlyIncome,\n        totalExpenses: monthlyExpenses,\n        monthlyBalance: monthlyIncome - monthlyExpenses\n      });\n    } catch (error) {\n      console.error('Error updating month data', error);\n      setMonthData({\n        days: {},\n        totalIncome: 0,\n        totalExpenses: 0,\n        monthlyBalance: 0\n      });\n    }\n  }, [entries, currentDate]);\n\n  // Update year data whenever entries or current date's year changes\n  useEffect(() => {\n    try {\n      const currentYear = getYear(currentDate);\n      const monthlySummaries = Array.from({\n        length: 12\n      }, (_, month) => ({\n        month,\n        year: currentYear,\n        totalIncome: 0,\n        totalExpenses: 0,\n        monthlyBalance: 0\n      }));\n      entries.forEach(entry => {\n        const entryDate = entry.date instanceof Date ? entry.date : new Date(entry.date);\n        const entryYear = getYear(entryDate);\n        const entryMonth = getMonth(entryDate);\n        if (entryYear === currentYear) {\n          if (entry.type === 'income') {\n            monthlySummaries[entryMonth].totalIncome += entry.amount;\n          } else {\n            monthlySummaries[entryMonth].totalExpenses += entry.amount;\n          }\n        }\n      });\n      let yearlyIncome = 0;\n      let yearlyExpenses = 0;\n      monthlySummaries.forEach(month => {\n        month.monthlyBalance = month.totalIncome - month.totalExpenses;\n        yearlyIncome += month.totalIncome;\n        yearlyExpenses += month.totalExpenses;\n      });\n      setYearData({\n        year: currentYear,\n        months: monthlySummaries,\n        totalIncome: yearlyIncome,\n        totalExpenses: yearlyExpenses,\n        yearlyBalance: yearlyIncome - yearlyExpenses\n      });\n    } catch (error) {\n      console.error('Error updating year data', error);\n      setYearData({\n        year: getYear(currentDate),\n        months: [],\n        totalIncome: 0,\n        totalExpenses: 0,\n        yearlyBalance: 0\n      });\n    }\n  }, [entries, currentDate]);\n  const addEntry = entry => {\n    const newEntry = {\n      ...entry,\n      id: `entry_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\n    };\n    setEntries(prevEntries => [...prevEntries, newEntry]);\n  };\n  const updateEntry = updatedEntry => {\n    setEntries(prevEntries => prevEntries.map(entry => entry.id === updatedEntry.id ? updatedEntry : entry));\n  };\n  const deleteEntry = id => {\n    setEntries(prevEntries => prevEntries.filter(entry => entry.id !== id));\n  };\n  const addRecurringPayment = payment => {\n    const newPayment = {\n      ...payment,\n      id: `recurring_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\n    };\n    setRecurringPayments(prevPayments => [...prevPayments, newPayment]);\n  };\n  const updateRecurringPayment = updatedPayment => {\n    setRecurringPayments(prevPayments => prevPayments.map(payment => payment.id === updatedPayment.id ? updatedPayment : payment));\n  };\n  const deleteRecurringPayment = id => {\n    setRecurringPayments(prevPayments => prevPayments.filter(payment => payment.id !== id));\n  };\n  return {\n    monthData,\n    yearData,\n    entries,\n    recurringPayments,\n    addEntry,\n    updateEntry,\n    deleteEntry,\n    addRecurringPayment,\n    updateRecurringPayment,\n    deleteRecurringPayment\n  };\n};\n_s(useFinancialData, \"dxC/SMLC1+AejQ1HuofvoloZNkk=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","addDays","format","startOfMonth","endOfMonth","getMonth","getYear","isSameDay","isSameWeek","isSameMonth","isSameYear","useAuth","DEFAULT_STORAGE_KEY","RECURRING_PAYMENTS_KEY","dateReviver","key","value","Date","useFinancialData","currentDate","_s","currentUser","entries","setEntries","recurringPayments","setRecurringPayments","monthData","setMonthData","days","totalIncome","totalExpenses","monthlyBalance","yearData","setYearData","year","months","yearlyBalance","getStorageKey","id","entriesKey","recurringKey","storedEntries","localStorage","getItem","storedRecurring","parsedEntries","JSON","parse","Array","isArray","parsedRecurring","error","console","setItem","stringify","toISOString","processRecurringPayments","newEntries","today","forEach","payment","isActive","shouldAddEntry","endDate","startDate","frequency","getDay","dayOfWeek","getDate","dayOfMonth","entryExists","some","entry","date","description","push","now","amount","type","length","prevEntries","monthStart","monthEnd","daysInMonth","day","dayStr","dailyBalance","runningBalance","monthlyIncome","monthlyExpenses","entryDate","currentYear","monthlySummaries","from","_","month","entryYear","entryMonth","yearlyIncome","yearlyExpenses","addEntry","newEntry","Math","random","toString","substring","updateEntry","updatedEntry","map","deleteEntry","filter","addRecurringPayment","newPayment","prevPayments","updateRecurringPayment","updatedPayment","deleteRecurringPayment"],"sources":["C:/Users/Administrator/Downloads/personal-budget-tracker/src/hooks/useFinancialData.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { addDays, format, startOfMonth, endOfMonth, getMonth, getYear, isSameDay, isSameWeek, isSameMonth, isSameYear } from 'date-fns';\r\nimport { FinancialEntry, DayData, MonthData, YearData, MonthSummary, RecurringPayment } from '../types';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nconst DEFAULT_STORAGE_KEY = 'budget-tracker-data';\r\nconst RECURRING_PAYMENTS_KEY = 'recurring-payments';\r\n\r\n// Helper function to safely handle date serialization\r\nconst dateReviver = (key: string, value: any) => {\r\n  if (key === 'date' || key === 'startDate' || key === 'endDate') {\r\n    return new Date(value);\r\n  }\r\n  return value;\r\n};\r\n\r\nexport const useFinancialData = (currentDate: Date) => {\r\n  const { currentUser } = useAuth();\r\n  const [entries, setEntries] = useState<FinancialEntry[]>([]);\r\n  const [recurringPayments, setRecurringPayments] = useState<RecurringPayment[]>([]);\r\n  const [monthData, setMonthData] = useState<MonthData>({\r\n    days: {},\r\n    totalIncome: 0,\r\n    totalExpenses: 0,\r\n    monthlyBalance: 0,\r\n  });\r\n  const [yearData, setYearData] = useState<YearData>({\r\n    year: getYear(currentDate),\r\n    months: [],\r\n    totalIncome: 0,\r\n    totalExpenses: 0,\r\n    yearlyBalance: 0,\r\n  });\r\n\r\n  // Get storage key for the current user\r\n  const getStorageKey = useCallback((key: string) => {\r\n    return currentUser \r\n      ? `${key}-${currentUser.id}`\r\n      : key;\r\n  }, [currentUser]);\r\n\r\n  // Load entries and recurring payments from localStorage\r\n  useEffect(() => {\r\n    try {\r\n      const entriesKey = getStorageKey(DEFAULT_STORAGE_KEY);\r\n      const recurringKey = getStorageKey(RECURRING_PAYMENTS_KEY);\r\n      \r\n      const storedEntries = localStorage.getItem(entriesKey);\r\n      const storedRecurring = localStorage.getItem(recurringKey);\r\n      \r\n      if (storedEntries) {\r\n        const parsedEntries = JSON.parse(storedEntries, dateReviver);\r\n        setEntries(Array.isArray(parsedEntries) ? parsedEntries : []);\r\n      }\r\n      \r\n      if (storedRecurring) {\r\n        const parsedRecurring = JSON.parse(storedRecurring, dateReviver);\r\n        setRecurringPayments(Array.isArray(parsedRecurring) ? parsedRecurring : []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading data from localStorage', error);\r\n      setEntries([]);\r\n      setRecurringPayments([]);\r\n    }\r\n  }, [getStorageKey]);\r\n\r\n  // Save entries and recurring payments to localStorage\r\n  useEffect(() => {\r\n    try {\r\n      const entriesKey = getStorageKey(DEFAULT_STORAGE_KEY);\r\n      const recurringKey = getStorageKey(RECURRING_PAYMENTS_KEY);\r\n      \r\n      localStorage.setItem(entriesKey, JSON.stringify(entries, (key, value) => {\r\n        if (value instanceof Date) {\r\n          return value.toISOString();\r\n        }\r\n        return value;\r\n      }));\r\n      \r\n      localStorage.setItem(recurringKey, JSON.stringify(recurringPayments, (key, value) => {\r\n        if (value instanceof Date) {\r\n          return value.toISOString();\r\n        }\r\n        return value;\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error saving data to localStorage', error);\r\n    }\r\n  }, [entries, recurringPayments, getStorageKey]);\r\n\r\n  // Process recurring payments and update entries\r\n  useEffect(() => {\r\n    const processRecurringPayments = () => {\r\n      const newEntries: FinancialEntry[] = [];\r\n      const today = new Date();\r\n      \r\n      recurringPayments.forEach(payment => {\r\n        if (!payment.isActive) return;\r\n        \r\n        const shouldAddEntry = (() => {\r\n          if (payment.endDate && payment.endDate < today) return false;\r\n          if (payment.startDate > today) return false;\r\n          \r\n          switch (payment.frequency) {\r\n            case 'daily':\r\n              return true;\r\n            case 'weekly':\r\n              return isSameWeek(today, payment.startDate) && today.getDay() === payment.dayOfWeek;\r\n            case 'monthly':\r\n              return isSameMonth(today, payment.startDate) && today.getDate() === payment.dayOfMonth;\r\n            case 'yearly':\r\n              return isSameYear(today, payment.startDate) && \r\n                     today.getMonth() === payment.startDate.getMonth() && \r\n                     today.getDate() === payment.startDate.getDate();\r\n            default:\r\n              return false;\r\n          }\r\n        })();\r\n        \r\n        if (shouldAddEntry) {\r\n          const entryExists = entries.some(entry => \r\n            isSameDay(entry.date, today) && \r\n            entry.description === payment.description\r\n          );\r\n          \r\n          if (!entryExists) {\r\n            newEntries.push({\r\n              id: `recurring_${payment.id}_${Date.now()}`,\r\n              date: today,\r\n              amount: payment.amount,\r\n              description: payment.description,\r\n              type: payment.type\r\n            });\r\n          }\r\n        }\r\n      });\r\n      \r\n      if (newEntries.length > 0) {\r\n        setEntries(prevEntries => [...prevEntries, ...newEntries]);\r\n      }\r\n    };\r\n    \r\n    processRecurringPayments();\r\n  }, [recurringPayments, entries]);\r\n\r\n  // Update month data whenever entries or current date change\r\n  useEffect(() => {\r\n    try {\r\n      const monthStart = startOfMonth(currentDate);\r\n      const monthEnd = endOfMonth(currentDate);\r\n      const daysInMonth: Record<string, DayData> = {};\r\n      \r\n      // Initialize days in month\r\n      let day = monthStart;\r\n      while (day <= monthEnd) {\r\n        const dayStr = format(day, 'yyyy-MM-dd');\r\n        daysInMonth[dayStr] = {\r\n          date: new Date(day),\r\n          entries: [],\r\n          totalIncome: 0,\r\n          totalExpenses: 0,\r\n          dailyBalance: 0,\r\n          runningBalance: 0\r\n        };\r\n        day = addDays(day, 1);\r\n      }\r\n      \r\n      // Add entries to their respective days\r\n      let monthlyIncome = 0;\r\n      let monthlyExpenses = 0;\r\n      \r\n      entries.forEach(entry => {\r\n        const entryDate = entry.date instanceof Date ? entry.date : new Date(entry.date);\r\n        \r\n        if (entryDate >= monthStart && entryDate <= monthEnd) {\r\n          const dayStr = format(entryDate, 'yyyy-MM-dd');\r\n          \r\n          if (daysInMonth[dayStr]) {\r\n            daysInMonth[dayStr].entries.push({\r\n              ...entry,\r\n              date: entryDate\r\n            });\r\n            \r\n            if (entry.type === 'income') {\r\n              daysInMonth[dayStr].totalIncome += entry.amount;\r\n              monthlyIncome += entry.amount;\r\n            } else {\r\n              daysInMonth[dayStr].totalExpenses += entry.amount;\r\n              monthlyExpenses += entry.amount;\r\n            }\r\n            \r\n            daysInMonth[dayStr].dailyBalance = daysInMonth[dayStr].totalIncome - daysInMonth[dayStr].totalExpenses;\r\n          }\r\n        }\r\n      });\r\n      \r\n      // Calculate running balance for each day\r\n      let runningBalance = 0;\r\n      day = monthStart;\r\n      while (day <= monthEnd) {\r\n        const dayStr = format(day, 'yyyy-MM-dd');\r\n        runningBalance += daysInMonth[dayStr].dailyBalance;\r\n        daysInMonth[dayStr].runningBalance = runningBalance;\r\n        day = addDays(day, 1);\r\n      }\r\n      \r\n      setMonthData({\r\n        days: daysInMonth,\r\n        totalIncome: monthlyIncome,\r\n        totalExpenses: monthlyExpenses,\r\n        monthlyBalance: monthlyIncome - monthlyExpenses\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating month data', error);\r\n      setMonthData({\r\n        days: {},\r\n        totalIncome: 0, \r\n        totalExpenses: 0,\r\n        monthlyBalance: 0\r\n      });\r\n    }\r\n  }, [entries, currentDate]);\r\n\r\n  // Update year data whenever entries or current date's year changes\r\n  useEffect(() => {\r\n    try {\r\n      const currentYear = getYear(currentDate);\r\n      \r\n      const monthlySummaries: MonthSummary[] = Array.from({ length: 12 }, (_, month) => ({\r\n        month,\r\n        year: currentYear,\r\n        totalIncome: 0,\r\n        totalExpenses: 0,\r\n        monthlyBalance: 0\r\n      }));\r\n      \r\n      entries.forEach(entry => {\r\n        const entryDate = entry.date instanceof Date ? entry.date : new Date(entry.date);\r\n        const entryYear = getYear(entryDate);\r\n        const entryMonth = getMonth(entryDate);\r\n        \r\n        if (entryYear === currentYear) {\r\n          if (entry.type === 'income') {\r\n            monthlySummaries[entryMonth].totalIncome += entry.amount;\r\n          } else {\r\n            monthlySummaries[entryMonth].totalExpenses += entry.amount;\r\n          }\r\n        }\r\n      });\r\n      \r\n      let yearlyIncome = 0;\r\n      let yearlyExpenses = 0;\r\n      \r\n      monthlySummaries.forEach(month => {\r\n        month.monthlyBalance = month.totalIncome - month.totalExpenses;\r\n        yearlyIncome += month.totalIncome;\r\n        yearlyExpenses += month.totalExpenses;\r\n      });\r\n      \r\n      setYearData({\r\n        year: currentYear,\r\n        months: monthlySummaries,\r\n        totalIncome: yearlyIncome,\r\n        totalExpenses: yearlyExpenses,\r\n        yearlyBalance: yearlyIncome - yearlyExpenses\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating year data', error);\r\n      setYearData({\r\n        year: getYear(currentDate),\r\n        months: [],\r\n        totalIncome: 0,\r\n        totalExpenses: 0,\r\n        yearlyBalance: 0\r\n      });\r\n    }\r\n  }, [entries, currentDate]);\r\n\r\n  const addEntry = (entry: Omit<FinancialEntry, 'id'>) => {\r\n    const newEntry: FinancialEntry = {\r\n      ...entry,\r\n      id: `entry_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\r\n    };\r\n    setEntries(prevEntries => [...prevEntries, newEntry]);\r\n  };\r\n\r\n  const updateEntry = (updatedEntry: FinancialEntry) => {\r\n    setEntries(prevEntries =>\r\n      prevEntries.map(entry => \r\n        entry.id === updatedEntry.id ? updatedEntry : entry\r\n      )\r\n    );\r\n  };\r\n\r\n  const deleteEntry = (id: string) => {\r\n    setEntries(prevEntries => prevEntries.filter(entry => entry.id !== id));\r\n  };\r\n\r\n  const addRecurringPayment = (payment: Omit<RecurringPayment, 'id'>) => {\r\n    const newPayment: RecurringPayment = {\r\n      ...payment,\r\n      id: `recurring_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\r\n    };\r\n    setRecurringPayments(prevPayments => [...prevPayments, newPayment]);\r\n  };\r\n\r\n  const updateRecurringPayment = (updatedPayment: RecurringPayment) => {\r\n    setRecurringPayments(prevPayments =>\r\n      prevPayments.map(payment => \r\n        payment.id === updatedPayment.id ? updatedPayment : payment\r\n      )\r\n    );\r\n  };\r\n\r\n  const deleteRecurringPayment = (id: string) => {\r\n    setRecurringPayments(prevPayments => prevPayments.filter(payment => payment.id !== id));\r\n  };\r\n\r\n  return {\r\n    monthData,\r\n    yearData,\r\n    entries,\r\n    recurringPayments,\r\n    addEntry,\r\n    updateEntry,\r\n    deleteEntry,\r\n    addRecurringPayment,\r\n    updateRecurringPayment,\r\n    deleteRecurringPayment\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}