{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { addDays, format, startOfMonth, endOfMonth, getMonth, getYear } from 'date-fns';\nimport { useAuth } from '../context/AuthContext';\nconst DEFAULT_STORAGE_KEY = 'budget-tracker-data';\n\n// Helper function to safely handle date serialization\nconst dateReviver = (key, value) => {\n  if (key === 'date' && typeof value === 'string') {\n    return new Date(value);\n  }\n  return value;\n};\nexport const useFinancialData = currentDate => {\n  _s();\n  const {\n    currentUser\n  } = useAuth();\n  const [entries, setEntries] = useState([]);\n  const [monthData, setMonthData] = useState({\n    days: {},\n    totalIncome: 0,\n    totalExpenses: 0,\n    monthlyBalance: 0\n  });\n  const [yearData, setYearData] = useState({\n    year: getYear(currentDate),\n    months: [],\n    totalIncome: 0,\n    totalExpenses: 0,\n    yearlyBalance: 0\n  });\n\n  // Get storage key for the current user\n  const getStorageKey = useCallback(() => {\n    return currentUser ? `${DEFAULT_STORAGE_KEY}-${currentUser.id}` : DEFAULT_STORAGE_KEY;\n  }, [currentUser]);\n\n  // Load entries from localStorage on initial render and when user changes\n  useEffect(() => {\n    try {\n      const storageKey = getStorageKey();\n      const storedData = localStorage.getItem(storageKey);\n      if (storedData) {\n        const parsedData = JSON.parse(storedData, dateReviver);\n        setEntries(Array.isArray(parsedData) ? parsedData : []);\n      } else {\n        // Initialize with empty array when no data exists or user changes\n        setEntries([]);\n      }\n    } catch (error) {\n      console.error('Error loading data from localStorage', error);\n      // Initialize with empty array if there's an error\n      setEntries([]);\n    }\n  }, [getStorageKey]);\n\n  // Save entries to localStorage whenever they change\n  useEffect(() => {\n    try {\n      const storageKey = getStorageKey();\n      localStorage.setItem(storageKey, JSON.stringify(entries, (key, value) => {\n        // Convert Date objects to ISO strings for storage\n        if (value instanceof Date) {\n          return value.toISOString();\n        }\n        return value;\n      }));\n    } catch (error) {\n      console.error('Error saving data to localStorage', error);\n    }\n  }, [entries, getStorageKey]);\n\n  // Update month data whenever entries or current date change\n  useEffect(() => {\n    try {\n      const monthStart = startOfMonth(currentDate);\n      const monthEnd = endOfMonth(currentDate);\n      const daysInMonth = {};\n\n      // Initialize days in month\n      let day = monthStart;\n      while (day <= monthEnd) {\n        const dayStr = format(day, 'yyyy-MM-dd');\n        daysInMonth[dayStr] = {\n          date: new Date(day),\n          entries: [],\n          totalIncome: 0,\n          totalExpenses: 0,\n          dailyBalance: 0,\n          runningBalance: 0\n        };\n        day = addDays(day, 1);\n      }\n\n      // Add entries to their respective days\n      let monthlyIncome = 0;\n      let monthlyExpenses = 0;\n      entries.forEach(entry => {\n        // Ensure entry.date is a Date object\n        const entryDate = entry.date instanceof Date ? entry.date : new Date(entry.date);\n\n        // Only process entries for the current month\n        if (entryDate >= monthStart && entryDate <= monthEnd) {\n          const dayStr = format(entryDate, 'yyyy-MM-dd');\n          if (daysInMonth[dayStr]) {\n            daysInMonth[dayStr].entries.push({\n              ...entry,\n              date: entryDate // Ensure we use the Date object\n            });\n            if (entry.type === 'income') {\n              daysInMonth[dayStr].totalIncome += entry.amount;\n              monthlyIncome += entry.amount;\n            } else {\n              daysInMonth[dayStr].totalExpenses += entry.amount;\n              monthlyExpenses += entry.amount;\n            }\n            daysInMonth[dayStr].dailyBalance = daysInMonth[dayStr].totalIncome - daysInMonth[dayStr].totalExpenses;\n          }\n        }\n      });\n\n      // Calculate running balance for each day\n      let runningBalance = 0;\n      day = monthStart;\n      while (day <= monthEnd) {\n        const dayStr = format(day, 'yyyy-MM-dd');\n        runningBalance += daysInMonth[dayStr].dailyBalance;\n        daysInMonth[dayStr].runningBalance = runningBalance;\n        day = addDays(day, 1);\n      }\n      setMonthData({\n        days: daysInMonth,\n        totalIncome: monthlyIncome,\n        totalExpenses: monthlyExpenses,\n        monthlyBalance: monthlyIncome - monthlyExpenses\n      });\n    } catch (error) {\n      console.error('Error updating month data', error);\n      // Initialize with empty data if there's an error\n      setMonthData({\n        days: {},\n        totalIncome: 0,\n        totalExpenses: 0,\n        monthlyBalance: 0\n      });\n    }\n  }, [entries, currentDate]);\n\n  // Update year data whenever entries or current date's year changes\n  useEffect(() => {\n    try {\n      const currentYear = getYear(currentDate);\n\n      // Initialize the monthly summaries array\n      const monthlySummaries = Array.from({\n        length: 12\n      }, (_, month) => ({\n        month,\n        year: currentYear,\n        totalIncome: 0,\n        totalExpenses: 0,\n        monthlyBalance: 0\n      }));\n\n      // Calculate the totals for each month in the year\n      entries.forEach(entry => {\n        const entryDate = entry.date instanceof Date ? entry.date : new Date(entry.date);\n        const entryYear = getYear(entryDate);\n        const entryMonth = getMonth(entryDate);\n\n        // Only process entries for the current year\n        if (entryYear === currentYear) {\n          if (entry.type === 'income') {\n            monthlySummaries[entryMonth].totalIncome += entry.amount;\n          } else {\n            monthlySummaries[entryMonth].totalExpenses += entry.amount;\n          }\n        }\n      });\n\n      // Calculate monthly balances and yearly totals\n      let yearlyIncome = 0;\n      let yearlyExpenses = 0;\n      monthlySummaries.forEach(month => {\n        month.monthlyBalance = month.totalIncome - month.totalExpenses;\n        yearlyIncome += month.totalIncome;\n        yearlyExpenses += month.totalExpenses;\n      });\n      setYearData({\n        year: currentYear,\n        months: monthlySummaries,\n        totalIncome: yearlyIncome,\n        totalExpenses: yearlyExpenses,\n        yearlyBalance: yearlyIncome - yearlyExpenses\n      });\n    } catch (error) {\n      console.error('Error updating year data', error);\n      setYearData({\n        year: getYear(currentDate),\n        months: [],\n        totalIncome: 0,\n        totalExpenses: 0,\n        yearlyBalance: 0\n      });\n    }\n  }, [entries, currentDate]);\n  const addEntry = entry => {\n    const newEntry = {\n      ...entry,\n      id: `entry_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\n    };\n    setEntries(prevEntries => [...prevEntries, newEntry]);\n  };\n  const updateEntry = updatedEntry => {\n    setEntries(prevEntries => prevEntries.map(entry => entry.id === updatedEntry.id ? updatedEntry : entry));\n  };\n  const deleteEntry = id => {\n    setEntries(prevEntries => prevEntries.filter(entry => entry.id !== id));\n  };\n  return {\n    monthData,\n    yearData,\n    addEntry,\n    updateEntry,\n    deleteEntry,\n    entries\n  };\n};\n_s(useFinancialData, \"ps1hUGoU7C+dv/eEC187j2wBjXA=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","addDays","format","startOfMonth","endOfMonth","getMonth","getYear","useAuth","DEFAULT_STORAGE_KEY","dateReviver","key","value","Date","useFinancialData","currentDate","_s","currentUser","entries","setEntries","monthData","setMonthData","days","totalIncome","totalExpenses","monthlyBalance","yearData","setYearData","year","months","yearlyBalance","getStorageKey","id","storageKey","storedData","localStorage","getItem","parsedData","JSON","parse","Array","isArray","error","console","setItem","stringify","toISOString","monthStart","monthEnd","daysInMonth","day","dayStr","date","dailyBalance","runningBalance","monthlyIncome","monthlyExpenses","forEach","entry","entryDate","push","type","amount","currentYear","monthlySummaries","from","length","_","month","entryYear","entryMonth","yearlyIncome","yearlyExpenses","addEntry","newEntry","now","Math","random","toString","substring","prevEntries","updateEntry","updatedEntry","map","deleteEntry","filter"],"sources":["C:/Users/Administrator/Downloads/personal-budget-tracker/src/hooks/useFinancialData.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { addDays, format, startOfMonth, endOfMonth, getMonth, getYear } from 'date-fns';\r\nimport { FinancialEntry, DayData, MonthData, YearData, MonthSummary } from '../types';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nconst DEFAULT_STORAGE_KEY = 'budget-tracker-data';\r\n\r\n// Helper function to safely handle date serialization\r\nconst dateReviver = (key: string, value: any) => {\r\n  if (key === 'date' && typeof value === 'string') {\r\n    return new Date(value);\r\n  }\r\n  return value;\r\n};\r\n\r\nexport const useFinancialData = (currentDate: Date) => {\r\n  const { currentUser } = useAuth();\r\n  const [entries, setEntries] = useState<FinancialEntry[]>([]);\r\n  const [monthData, setMonthData] = useState<MonthData>({\r\n    days: {},\r\n    totalIncome: 0,\r\n    totalExpenses: 0,\r\n    monthlyBalance: 0,\r\n  });\r\n  const [yearData, setYearData] = useState<YearData>({\r\n    year: getYear(currentDate),\r\n    months: [],\r\n    totalIncome: 0,\r\n    totalExpenses: 0,\r\n    yearlyBalance: 0,\r\n  });\r\n\r\n  // Get storage key for the current user\r\n  const getStorageKey = useCallback(() => {\r\n    return currentUser \r\n      ? `${DEFAULT_STORAGE_KEY}-${currentUser.id}`\r\n      : DEFAULT_STORAGE_KEY;\r\n  }, [currentUser]);\r\n\r\n  // Load entries from localStorage on initial render and when user changes\r\n  useEffect(() => {\r\n    try {\r\n      const storageKey = getStorageKey();\r\n      const storedData = localStorage.getItem(storageKey);\r\n      if (storedData) {\r\n        const parsedData = JSON.parse(storedData, dateReviver);\r\n        setEntries(Array.isArray(parsedData) ? parsedData : []);\r\n      } else {\r\n        // Initialize with empty array when no data exists or user changes\r\n        setEntries([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading data from localStorage', error);\r\n      // Initialize with empty array if there's an error\r\n      setEntries([]);\r\n    }\r\n  }, [getStorageKey]);\r\n\r\n  // Save entries to localStorage whenever they change\r\n  useEffect(() => {\r\n    try {\r\n      const storageKey = getStorageKey();\r\n      localStorage.setItem(storageKey, JSON.stringify(entries, (key, value) => {\r\n        // Convert Date objects to ISO strings for storage\r\n        if (value instanceof Date) {\r\n          return value.toISOString();\r\n        }\r\n        return value;\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error saving data to localStorage', error);\r\n    }\r\n  }, [entries, getStorageKey]);\r\n\r\n  // Update month data whenever entries or current date change\r\n  useEffect(() => {\r\n    try {\r\n      const monthStart = startOfMonth(currentDate);\r\n      const monthEnd = endOfMonth(currentDate);\r\n      const daysInMonth: Record<string, DayData> = {};\r\n      \r\n      // Initialize days in month\r\n      let day = monthStart;\r\n      while (day <= monthEnd) {\r\n        const dayStr = format(day, 'yyyy-MM-dd');\r\n        daysInMonth[dayStr] = {\r\n          date: new Date(day),\r\n          entries: [],\r\n          totalIncome: 0,\r\n          totalExpenses: 0,\r\n          dailyBalance: 0,\r\n          runningBalance: 0\r\n        };\r\n        day = addDays(day, 1);\r\n      }\r\n      \r\n      // Add entries to their respective days\r\n      let monthlyIncome = 0;\r\n      let monthlyExpenses = 0;\r\n      \r\n      entries.forEach(entry => {\r\n        // Ensure entry.date is a Date object\r\n        const entryDate = entry.date instanceof Date ? entry.date : new Date(entry.date);\r\n        \r\n        // Only process entries for the current month\r\n        if (entryDate >= monthStart && entryDate <= monthEnd) {\r\n          const dayStr = format(entryDate, 'yyyy-MM-dd');\r\n          \r\n          if (daysInMonth[dayStr]) {\r\n            daysInMonth[dayStr].entries.push({\r\n              ...entry,\r\n              date: entryDate // Ensure we use the Date object\r\n            });\r\n            \r\n            if (entry.type === 'income') {\r\n              daysInMonth[dayStr].totalIncome += entry.amount;\r\n              monthlyIncome += entry.amount;\r\n            } else {\r\n              daysInMonth[dayStr].totalExpenses += entry.amount;\r\n              monthlyExpenses += entry.amount;\r\n            }\r\n            \r\n            daysInMonth[dayStr].dailyBalance = daysInMonth[dayStr].totalIncome - daysInMonth[dayStr].totalExpenses;\r\n          }\r\n        }\r\n      });\r\n      \r\n      // Calculate running balance for each day\r\n      let runningBalance = 0;\r\n      day = monthStart;\r\n      while (day <= monthEnd) {\r\n        const dayStr = format(day, 'yyyy-MM-dd');\r\n        runningBalance += daysInMonth[dayStr].dailyBalance;\r\n        daysInMonth[dayStr].runningBalance = runningBalance;\r\n        day = addDays(day, 1);\r\n      }\r\n      \r\n      setMonthData({\r\n        days: daysInMonth,\r\n        totalIncome: monthlyIncome,\r\n        totalExpenses: monthlyExpenses,\r\n        monthlyBalance: monthlyIncome - monthlyExpenses\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating month data', error);\r\n      // Initialize with empty data if there's an error\r\n      setMonthData({\r\n        days: {},\r\n        totalIncome: 0, \r\n        totalExpenses: 0,\r\n        monthlyBalance: 0\r\n      });\r\n    }\r\n  }, [entries, currentDate]);\r\n\r\n  // Update year data whenever entries or current date's year changes\r\n  useEffect(() => {\r\n    try {\r\n      const currentYear = getYear(currentDate);\r\n      \r\n      // Initialize the monthly summaries array\r\n      const monthlySummaries: MonthSummary[] = Array.from({ length: 12 }, (_, month) => ({\r\n        month,\r\n        year: currentYear,\r\n        totalIncome: 0,\r\n        totalExpenses: 0,\r\n        monthlyBalance: 0\r\n      }));\r\n      \r\n      // Calculate the totals for each month in the year\r\n      entries.forEach(entry => {\r\n        const entryDate = entry.date instanceof Date ? entry.date : new Date(entry.date);\r\n        const entryYear = getYear(entryDate);\r\n        const entryMonth = getMonth(entryDate);\r\n        \r\n        // Only process entries for the current year\r\n        if (entryYear === currentYear) {\r\n          if (entry.type === 'income') {\r\n            monthlySummaries[entryMonth].totalIncome += entry.amount;\r\n          } else {\r\n            monthlySummaries[entryMonth].totalExpenses += entry.amount;\r\n          }\r\n        }\r\n      });\r\n      \r\n      // Calculate monthly balances and yearly totals\r\n      let yearlyIncome = 0;\r\n      let yearlyExpenses = 0;\r\n      \r\n      monthlySummaries.forEach(month => {\r\n        month.monthlyBalance = month.totalIncome - month.totalExpenses;\r\n        yearlyIncome += month.totalIncome;\r\n        yearlyExpenses += month.totalExpenses;\r\n      });\r\n      \r\n      setYearData({\r\n        year: currentYear,\r\n        months: monthlySummaries,\r\n        totalIncome: yearlyIncome,\r\n        totalExpenses: yearlyExpenses,\r\n        yearlyBalance: yearlyIncome - yearlyExpenses\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating year data', error);\r\n      setYearData({\r\n        year: getYear(currentDate),\r\n        months: [],\r\n        totalIncome: 0,\r\n        totalExpenses: 0,\r\n        yearlyBalance: 0\r\n      });\r\n    }\r\n  }, [entries, currentDate]);\r\n\r\n  const addEntry = (entry: Omit<FinancialEntry, 'id'>) => {\r\n    const newEntry: FinancialEntry = {\r\n      ...entry,\r\n      id: `entry_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\r\n    };\r\n    setEntries(prevEntries => [...prevEntries, newEntry]);\r\n  };\r\n\r\n  const updateEntry = (updatedEntry: FinancialEntry) => {\r\n    setEntries(prevEntries =>\r\n      prevEntries.map(entry => \r\n        entry.id === updatedEntry.id ? updatedEntry : entry\r\n      )\r\n    );\r\n  };\r\n\r\n  const deleteEntry = (id: string) => {\r\n    setEntries(prevEntries => prevEntries.filter(entry => entry.id !== id));\r\n  };\r\n\r\n  return {\r\n    monthData,\r\n    yearData,\r\n    addEntry,\r\n    updateEntry,\r\n    deleteEntry,\r\n    entries\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}