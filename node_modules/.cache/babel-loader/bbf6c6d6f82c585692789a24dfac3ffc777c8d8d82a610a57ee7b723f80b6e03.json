{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { addDays, format, startOfMonth, endOfMonth, parseISO } from 'date-fns';\nconst STORAGE_KEY = 'budget-tracker-data';\nexport const useFinancialData = currentDate => {\n  _s();\n  const [entries, setEntries] = useState([]);\n  const [monthData, setMonthData] = useState({\n    days: {},\n    totalIncome: 0,\n    totalExpenses: 0,\n    monthlyBalance: 0\n  });\n\n  // Load entries from localStorage on initial render\n  useEffect(() => {\n    const storedData = localStorage.getItem(STORAGE_KEY);\n    if (storedData) {\n      try {\n        const parsedData = JSON.parse(storedData, (key, value) => {\n          // Convert stored date strings back to Date objects\n          if (key === 'date' && typeof value === 'string') {\n            return parseISO(value);\n          }\n          return value;\n        });\n        setEntries(parsedData);\n      } catch (error) {\n        console.error('Error loading data from localStorage', error);\n      }\n    }\n  }, []);\n\n  // Save entries to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(entries));\n  }, [entries]);\n\n  // Update month data whenever entries or current date change\n  useEffect(() => {\n    const monthStart = startOfMonth(currentDate);\n    const monthEnd = endOfMonth(currentDate);\n    const daysInMonth = {};\n\n    // Initialize days in month\n    let day = monthStart;\n    while (day <= monthEnd) {\n      const dayStr = format(day, 'yyyy-MM-dd');\n      daysInMonth[dayStr] = {\n        date: new Date(day),\n        entries: [],\n        totalIncome: 0,\n        totalExpenses: 0,\n        dailyBalance: 0,\n        runningBalance: 0\n      };\n      day = addDays(day, 1);\n    }\n\n    // Add entries to their respective days\n    let monthlyIncome = 0;\n    let monthlyExpenses = 0;\n    entries.forEach(entry => {\n      const entryDate = entry.date;\n      // Only process entries for the current month\n      if (entryDate >= monthStart && entryDate <= monthEnd) {\n        const dayStr = format(entryDate, 'yyyy-MM-dd');\n        if (daysInMonth[dayStr]) {\n          daysInMonth[dayStr].entries.push(entry);\n          if (entry.type === 'income') {\n            daysInMonth[dayStr].totalIncome += entry.amount;\n            monthlyIncome += entry.amount;\n          } else {\n            daysInMonth[dayStr].totalExpenses += entry.amount;\n            monthlyExpenses += entry.amount;\n          }\n          daysInMonth[dayStr].dailyBalance = daysInMonth[dayStr].totalIncome - daysInMonth[dayStr].totalExpenses;\n        }\n      }\n    });\n\n    // Calculate running balance for each day\n    let runningBalance = 0;\n    day = monthStart;\n    while (day <= monthEnd) {\n      const dayStr = format(day, 'yyyy-MM-dd');\n      runningBalance += daysInMonth[dayStr].dailyBalance;\n      daysInMonth[dayStr].runningBalance = runningBalance;\n      day = addDays(day, 1);\n    }\n    setMonthData({\n      days: daysInMonth,\n      totalIncome: monthlyIncome,\n      totalExpenses: monthlyExpenses,\n      monthlyBalance: monthlyIncome - monthlyExpenses\n    });\n  }, [entries, currentDate]);\n  const addEntry = entry => {\n    const newEntry = {\n      ...entry,\n      id: Date.now().toString()\n    };\n    setEntries(prev => [...prev, newEntry]);\n  };\n  const deleteEntry = id => {\n    setEntries(prev => prev.filter(entry => entry.id !== id));\n  };\n  return {\n    monthData,\n    addEntry,\n    deleteEntry,\n    entries\n  };\n};\n_s(useFinancialData, \"unfTMqhEPCNSBuklhiAo91L0StY=\");","map":{"version":3,"names":["useState","useEffect","addDays","format","startOfMonth","endOfMonth","parseISO","STORAGE_KEY","useFinancialData","currentDate","_s","entries","setEntries","monthData","setMonthData","days","totalIncome","totalExpenses","monthlyBalance","storedData","localStorage","getItem","parsedData","JSON","parse","key","value","error","console","setItem","stringify","monthStart","monthEnd","daysInMonth","day","dayStr","date","Date","dailyBalance","runningBalance","monthlyIncome","monthlyExpenses","forEach","entry","entryDate","push","type","amount","addEntry","newEntry","id","now","toString","prev","deleteEntry","filter"],"sources":["C:/Users/Administrator/Documents/XDA/personal-budget-tracker/src/hooks/useFinancialData.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { addDays, format, startOfMonth, endOfMonth, getDate, isSameDay, parseISO } from 'date-fns';\r\nimport { FinancialEntry, DayData, MonthData } from '../types';\r\n\r\nconst STORAGE_KEY = 'budget-tracker-data';\r\n\r\nexport const useFinancialData = (currentDate: Date) => {\r\n  const [entries, setEntries] = useState<FinancialEntry[]>([]);\r\n  const [monthData, setMonthData] = useState<MonthData>({\r\n    days: {},\r\n    totalIncome: 0,\r\n    totalExpenses: 0,\r\n    monthlyBalance: 0,\r\n  });\r\n\r\n  // Load entries from localStorage on initial render\r\n  useEffect(() => {\r\n    const storedData = localStorage.getItem(STORAGE_KEY);\r\n    if (storedData) {\r\n      try {\r\n        const parsedData = JSON.parse(storedData, (key, value) => {\r\n          // Convert stored date strings back to Date objects\r\n          if (key === 'date' && typeof value === 'string') {\r\n            return parseISO(value);\r\n          }\r\n          return value;\r\n        });\r\n        setEntries(parsedData);\r\n      } catch (error) {\r\n        console.error('Error loading data from localStorage', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save entries to localStorage whenever they change\r\n  useEffect(() => {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(entries));\r\n  }, [entries]);\r\n\r\n  // Update month data whenever entries or current date change\r\n  useEffect(() => {\r\n    const monthStart = startOfMonth(currentDate);\r\n    const monthEnd = endOfMonth(currentDate);\r\n    const daysInMonth: Record<string, DayData> = {};\r\n    \r\n    // Initialize days in month\r\n    let day = monthStart;\r\n    while (day <= monthEnd) {\r\n      const dayStr = format(day, 'yyyy-MM-dd');\r\n      daysInMonth[dayStr] = {\r\n        date: new Date(day),\r\n        entries: [],\r\n        totalIncome: 0,\r\n        totalExpenses: 0,\r\n        dailyBalance: 0,\r\n        runningBalance: 0\r\n      };\r\n      day = addDays(day, 1);\r\n    }\r\n    \r\n    // Add entries to their respective days\r\n    let monthlyIncome = 0;\r\n    let monthlyExpenses = 0;\r\n    \r\n    entries.forEach(entry => {\r\n      const entryDate = entry.date;\r\n      // Only process entries for the current month\r\n      if (entryDate >= monthStart && entryDate <= monthEnd) {\r\n        const dayStr = format(entryDate, 'yyyy-MM-dd');\r\n        \r\n        if (daysInMonth[dayStr]) {\r\n          daysInMonth[dayStr].entries.push(entry);\r\n          \r\n          if (entry.type === 'income') {\r\n            daysInMonth[dayStr].totalIncome += entry.amount;\r\n            monthlyIncome += entry.amount;\r\n          } else {\r\n            daysInMonth[dayStr].totalExpenses += entry.amount;\r\n            monthlyExpenses += entry.amount;\r\n          }\r\n          \r\n          daysInMonth[dayStr].dailyBalance = daysInMonth[dayStr].totalIncome - daysInMonth[dayStr].totalExpenses;\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Calculate running balance for each day\r\n    let runningBalance = 0;\r\n    day = monthStart;\r\n    while (day <= monthEnd) {\r\n      const dayStr = format(day, 'yyyy-MM-dd');\r\n      runningBalance += daysInMonth[dayStr].dailyBalance;\r\n      daysInMonth[dayStr].runningBalance = runningBalance;\r\n      day = addDays(day, 1);\r\n    }\r\n    \r\n    setMonthData({\r\n      days: daysInMonth,\r\n      totalIncome: monthlyIncome,\r\n      totalExpenses: monthlyExpenses,\r\n      monthlyBalance: monthlyIncome - monthlyExpenses\r\n    });\r\n  }, [entries, currentDate]);\r\n\r\n  const addEntry = (entry: Omit<FinancialEntry, 'id'>) => {\r\n    const newEntry: FinancialEntry = {\r\n      ...entry,\r\n      id: Date.now().toString(),\r\n    };\r\n    setEntries(prev => [...prev, newEntry]);\r\n  };\r\n\r\n  const deleteEntry = (id: string) => {\r\n    setEntries(prev => prev.filter(entry => entry.id !== id));\r\n  };\r\n\r\n  return {\r\n    monthData,\r\n    addEntry,\r\n    deleteEntry,\r\n    entries\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}